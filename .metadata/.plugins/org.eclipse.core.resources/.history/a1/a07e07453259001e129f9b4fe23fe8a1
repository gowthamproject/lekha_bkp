package com.wipro.lekhaclient.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.LinkedHashMap;
import java.util.Map;

public abstract class LekhaService {

	private static final String API_KEY = "257a93042496925ebe74f86ac5116faa070ef64c637746cabd2a2d97e08b9668";
	
    protected static String pullData(final String url, String httpMethod) throws IOException {
        URL weburl = new URL(url);
        HttpURLConnection conn = (HttpURLConnection) weburl.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(httpMethod);
        conn.setRequestProperty("Accept", "application/json");
        //conn.setRequestProperty("Cookie", HTTPSessionManager.COOKIE);
        conn.setRequestProperty("Authorization", API_KEY);

        //System.out.println("Output is: " + conn.getResponseCode());
        BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
        StringBuilder sb = new StringBuilder();
        String output;
        while ((output = br.readLine()) != null) {
            sb.append(output);
        }
        return sb.toString();
    }

    protected static String pullData(final String url, Map<String, Object> params, String httpMetod) throws IOException {
        URL weburl = new URL(url);
        StringBuilder postData = new StringBuilder();
        for (Map.Entry<String, Object> param : params.entrySet()) {
            if (postData.length() != 0) postData.append('&');
            postData.append(URLEncoder.encode(param.getKey(), String.valueOf(StandardCharsets.UTF_8)));
            postData.append('=');
            postData.append(URLEncoder.encode(String.valueOf(param.getValue()), String.valueOf(StandardCharsets.UTF_8)));
        }
        byte[] postDataBytes = postData.toString().getBytes(StandardCharsets.UTF_8);

        HttpURLConnection conn = (HttpURLConnection) weburl.openConnection();
        conn.setDoOutput(true);
        conn.setRequestMethod(httpMetod);
        conn.setRequestProperty("Accept", "application/json; charset=utf-8");
        //conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        //conn.setRequestProperty("Content-Type", "text/html; charset=utf-8");
        conn.setRequestProperty("Content-Type", "application/json");
        //conn.setRequestProperty("Cookie", HTTPSessionManager.COOKIE);
        conn.setRequestProperty("Authorization", API_KEY);
        conn.getOutputStream().write(postDataBytes);
        //System.out.println("Output is: " + conn.getResponseCode());
        BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));
        StringBuilder sb = new StringBuilder();
        String output;
        while ((output = br.readLine()) != null) {
            sb.append(output);
        }
        return sb.toString();
    }
    
    protected static String postData(final String url, Map<String, Object> params, String httpMetod) throws Exception {
    	URL weburl = new URL(url);
         StringBuilder postData = new StringBuilder();
         for (Map.Entry<String,Object> param : params.entrySet()) {
             if (postData.length() != 0) postData.append('&');
             postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
             postData.append('=');
             postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
         }
         byte[] postDataBytes = postData.toString().getBytes("UTF-8");

         HttpURLConnection conn = (HttpURLConnection)weburl.openConnection();
         conn.setRequestMethod("POST");
         conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
         conn.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
         conn.setRequestProperty("Authorization", API_KEY);
         conn.setDoOutput(true);
        // conn.getOutputStream().write(postDataBytes);

         BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));

         for (int c; (c = in.read()) >= 0;)
             System.out.print((char)c);
         
         return in.toString();
     }
    
}
