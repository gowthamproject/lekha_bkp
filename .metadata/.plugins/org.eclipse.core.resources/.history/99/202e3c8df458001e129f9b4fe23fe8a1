package com.wipro.lekhaclient.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.wipro.lekhaclient.common.Core5GDetails;
import com.wipro.lekhaclient.model.Node;
import com.wipro.lekhaclient.utils.Util;

public class NodeDAO implements DAOInterface<Node>{
	private static final String INSERT_Node_QUERY = "INSERT INTO gnb VALUES";
	private static final String VIEW_Node_QUERY = "SELECT * FROM gnb";
	private static final String UPDATE_Node_QUERY = "UPDATE gnb SET plmn_id=?, gnb_id=?, tac=?, status=? where name=?";
	private static final String DELETE_Node_QUERY = "DELETE from gnb where core_id = '" + Core5GDetails._5G_CORE_ID
			+ "' and name=";

	private static Connection connection = null;

	public NodeDAO() {
		connection = DAOConnection.create_connection();
	}

	@Override
	public List<Node> getRecordByParam(Map<String, Object> paramMap) throws SQLException {
		List<Node> gnbs = new ArrayList<Node>();
		try (Statement statement = connection.createStatement()) {
			String param = Util.parseAndGetSqlParam(paramMap);
			ResultSet resultSet = statement.executeQuery(VIEW_Node_QUERY + param);

			while (resultSet.next()) {
				Node node = new Node();
				node.setOru_name(resultSet.getString(1));
				node.setOru_id(resultSet.getInt(3));
				node.getStatusinfo().setStatus((resultSet.getString(6)));
				gnbs.add(node);
			}
		} catch (SQLException e) {
			connection.close();
			System.out.println("Connection Closed while fetching gnb records");
		}
		return gnbs;
	}

	@Override
	public void insertRecords(List<Node> listOfData) throws SQLException {
		for (Node data : listOfData) {
			insertRecord(data);
		}
	}

	@Override
	public void insertRecord(Node data) throws SQLException {
		try (Statement statement = connection.createStatement()) {
			String status = data.getOper_state().equals("1") ? "Disconnected" : "Connected";
			String queryParam = "('" + data.getName() + "', '" + data.getPlmn_id() + "', " + data.getGnb_id() + ", "
					+ data.getTac() + "," + " '" + data.getSctp_address() + "', '" + status + "','"
					+ Core5GDetails._5G_CORE_ID + "')";

			int res = statement.executeUpdate(INSERT_Node_QUERY + queryParam);
			if (res != 0) {
				// System.out.println("gnb id ----:" + data.getGnb_id() + " successfully
				// polled.!");
			}
		} catch (SQLException e) {
			connection.close();
			System.out.println("Connection Closed while inserting gnb records");
		}

	}

	@Override
	public void updateRecord(Node data) throws SQLException {
		{
			try {
				String status = data.getOper_state().equals("1") ? "Disconnected" : "Connected";
				PreparedStatement preparedStmt = connection.prepareStatement(UPDATE_Node_QUERY);
				preparedStmt.setString(1, data.getPlmn_id());
				preparedStmt.setInt(2, data.getGnb_id());
				preparedStmt.setInt(3, data.getTac());
				preparedStmt.setString(4, status);
				preparedStmt.setString(5, data.getName());
				int res = preparedStmt.executeUpdate();
				if (res != 0) {
					// System.out.println("gnb ----:" + data.getName() + " successfully updated.!");
				}
			} catch (SQLException e) {
				connection.close();
				System.out.println("Connection Closed while updating gnb records");
			}
		}
	}

	@Override
	public void deleteRecords(List<String> params) throws SQLException {
		try (Statement statement = connection.createStatement()) {
			for (String param : params) {
				statement.executeUpdate(DELETE_Node_QUERY + "'" + param + "'");
			}
		} catch (SQLException e) {
			connection.close();
		}
	}

	@Override
	public void updateOrInsertRecords(List<Node> listOfData) throws SQLException {
		if (listOfData == null || listOfData.isEmpty())
			return;

		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("core_id", Core5GDetails._5G_CORE_ID);
		List<Node> existingNodes = getRecordByParam(paramMap);

		if (existingNodes.isEmpty()) {
			insertRecords(listOfData);
		} else {

			List<String> existingNodeNames = existingNodes.stream().map(gnb -> gnb.getName())
					.collect(Collectors.toList());
			List<String> currentNodeNames = listOfData.stream().map(gnb -> gnb.getName()).collect(Collectors.toList());

			List<String> deleteNodes = existingNodeNames.stream().filter(i -> !currentNodeNames.contains(i))
					.collect(Collectors.toList());
			deleteRecords(deleteNodes);
			List<Node> insertNodes = listOfData.stream().filter(i -> !existingNodeNames.contains(i.getName()))
					.collect(Collectors.toList());
			insertRecords(insertNodes);

			for (Node curr_gnb : listOfData) {
				for (Node ext_gnb : existingNodes) {
					if (curr_gnb.getName().equals(ext_gnb.getName())) {
						String status = curr_gnb.getOper_state().equals("1") ? "Disconnected" : "Connected";
						if (!status.equals(ext_gnb.getOper_state()))
							updateRecord(curr_gnb);
					}
				}
			}
		}
	}

	@Override
	public void pollRecords(List<Node> listOfData) throws SQLException, InterruptedException {
		updateOrInsertRecords(listOfData);
		System.out.println("Node records are polling..");
	}

	public static void main(String[] args) throws SQLException, InterruptedException {
		new NodeDAO().pollRecords(null);
	}
}
