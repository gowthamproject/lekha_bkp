package com.wipro.lekhaclient.test;

import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.wipro.lekhaclient.common.Constants;
import com.wipro.lekhaclient.model.AlarmInfo;
import com.wipro.lekhaclient.model.Node;

import okhttp3.HttpUrl;
import okhttp3.Request;

public class AlarmDetailsData {

	public static final String DATA = "[{'id' : 2, 'start_time':'2023-08-02 21:49:32', 'severity':'critical', 'obj_class':'test class',"
			+ "'obj_id':'testid', 'alarm_identifier':'', 'event_type':'', 'probable_cause':'raemis', 'specific_problem':'', 'add_text':'critical data',"
			+ "'internal_id':3, 'acknowleded':0}, {'id' : 3, 'start_time':'2023-03-22 12:22:11', 'severity':'warning', 'obj_class':'test class 2',"
			+ "'obj_id':'testid 2', 'alarm_identifier':'', 'event_type':'', 'probable_cause':'raemis', 'specific_problem':'', 'add_text':'warning data',"
			+ "'internal_id':5, 'acknowledge':1}]";

	public static final String ALARMDATA = "[{'region_id' : 1, " + "'alarmInfo':[" + "{" + "'node_id' : 251, "
			+ "'alarm_id':'LWS_C005', " + "'alarm_name':'alarmName', " + "'alarm_type':'alarmType',"
			+ "'alarm_cause':'alarmCause', " + "'alarm_severity':'Critical', " + "'alarm_occurance_time':'AOT', "
			+ "'corrective_action':'CA', " + "'alarm_state':'New'" + "}" + "]" + "}" + "]";

	public static final String NODE_DATA = "{ 'id':19,'oru_id':205,'oru_name':'o-rutest1205','siteName':'LekhaHQ','region_id':1,'transactionId':1001,'timeStamp':'2023-09-20T12:08:21+0530','sourceName':'EMS','nodeinterfaceinfo':{'ipAddress':'192.168.9.201'},'statusinfo':{'status':'Disconnected'},'location':{'latitude':12.9155,'longitude':77.5859}}";

	public static void main(String[] args) {
		System.out.println(AlarmDetailsData.ALARMDATA);

		HttpUrl.Builder urlBuilder = HttpUrl.parse(Constants.SESSION_URL).newBuilder();
		urlBuilder.addQueryParameter("v", "1.0");
		urlBuilder.addQueryParameter("user", "vogella");
		String url = urlBuilder.build().toString();

		Request request = new Request.Builder().url(url).build();

		List<AlarmInfo> alarmInfoList = Arrays
				.asList(new Gson().fromJson(AlarmDetailsData.ALARMDATA, AlarmInfo[].class));
		
		List<Node> nodeList = Arrays
				.asList(new Gson().fromJson(AlarmDetailsData.NODE_DATA, Node[].class));
		
		System.out.println(nodeList);
	}
}
