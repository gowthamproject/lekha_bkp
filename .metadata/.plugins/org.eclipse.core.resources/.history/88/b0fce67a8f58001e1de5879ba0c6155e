package com.wipro.lekhaclient.services;

import com.wipro.lekhaclient.certificate.Certificate;
import com.wipro.lekhaclient.common.Constants;
import com.wipro.lekhaclient.dao.NodeDAO;
import com.wipro.lekhaclient.model.Location;
import com.wipro.lekhaclient.model.LocationDetails;
import com.wipro.lekhaclient.model.Node;
import com.wipro.lekhaclient.model.Nodes;
import com.wipro.lekhaclient.model.Region;
import com.wipro.lekhaclient.utils.Util;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class NodeService extends BaseServices implements LocationIntf{
	
	protected static Map<Region, List<Nodes>> nodeMapByRegion = null;
	
	static {
		try {
			pull_NodeDetailsFromLekhaAPI();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unchecked")
	public static void pull_NodeDetailsFromLekhaAPI() throws Exception {

		Certificate.doTrustToCertificates();
		nodeMapByRegion = getAllNodes();
		for (Region region : nodeMapByRegion.keySet()) {
			int region_id = region.getId();
			String state = region.getName();
			List<Nodes> nodes = nodeMapByRegion.get(region);
			for (Nodes node : nodes) {
				List<Integer> nodeIds = node.getOru_list();
				for (Integer nodeId : nodeIds) {
					String responseJson = pullData(
							Constants.LEKHA_ENDPOINT + "/nms/nodes/" + region_id + "/" + nodeId);
					if (responseJson != null && !responseJson.isEmpty()) {
						List<Node> nodeList = (List<Node>) Util.parseJsonStrToObject(responseJson, Constants.NODE);
						new NodeDAO().pollRecords(nodeList);
						
						for(Node nodeObj : nodeList) {
							Location location = nodeObj.getLocation();
							location.setNode_id(nodeId);
							location.setRegion_state(state);
						}
					}
				}
			}
		}
	}

	public Map<Region, List<Nodes>> getNodeMapByRegion() {
		return nodeMapByRegion;
	}

	@Override
	public void pollLocationDetails(LocationDetails data) {
		
		
	}
}
