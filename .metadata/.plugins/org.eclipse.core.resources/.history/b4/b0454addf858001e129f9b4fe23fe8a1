package com.wipro.lekhaclient.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.wipro.lekhaclient.common.Core5GDetails;
import com.wipro.lekhaclient.model.Location;
import com.wipro.lekhaclient.model.Location;
import com.wipro.lekhaclient.model.StatusInfo;
import com.wipro.lekhaclient.utils.Util;


public class LocationDAO implements DAOInterface<Location>{
	
	private static final String INSERT_LOCATION_QUERY = "INSERT INTO location VALUES";
	private static final String VIEW_LOCATION_QUERY = "SELECT * FROM location";
	private static final String UPDATE_LOCATION_QUERY = "UPDATE location SET gnb_id=? where core_id=?";
	private static final String DELETE_LOCATION_QUERY = "DELETE from location where core_id = '" + Core5GDetails._5G_CORE_ID + "' and gnb_id=";

	private static Connection connection = null;

	public LocationDAO() {
		connection = DAOConnection.create_connection();
	}
	
	@Override
	public List<Location> getRecordByParam(Map<String, Object> paramMap) throws SQLException {
		List<Location> nodes = new ArrayList<Location>();
		try (Statement statement = connection.createStatement()) {
			String param = Util.parseAndGetSqlParam(paramMap);
			ResultSet resultSet = statement.executeQuery(VIEW_LOCATION_QUERY + param);

			while (resultSet.next()) {
				Location node = new Location();
				node.setOru_name(resultSet.getString(1));
				node.setOru_id(resultSet.getInt(3));
				StatusInfo sinfo = new StatusInfo();
				sinfo.setStatus(resultSet.getString(6));
				node.setStatusinfo(sinfo);
				nodes.add(node);
			}
		} catch (SQLException e) {
			e.printStackTrace();
			connection.close();
			System.out.println("Connection Closed while fetching node records");
		}
		return nodes;
	}

	@Override
	public void insertRecords(List<Location> listOfData) throws SQLException {
		for (Location data : listOfData) {
			insertRecord(data);
		}
	}

	@Override
	public void insertRecord(Location data) throws SQLException {
		try (Statement statement = connection.createStatement()) {
			String queryParam = "('" + data.getOru_name() + "',"+ null +", " + data.getOru_id() + ", "
					+ null + "," + " '" + data.getLocationInterfaceInfo().getIpAddress() + "', '" + data.getStatusinfo().getStatus() + "','"
					+ Core5GDetails._5G_CORE_ID + "')";

			int res = statement.executeUpdate(INSERT_LOCATION_QUERY + queryParam);
			if (res != 0) {
				// System.out.println("node id ----:" + data.getGnb_id() + " successfully
				// polled.!");
			}
		} catch (SQLException e) {
			connection.close();
			System.out.println("Connection Closed while inserting node records");
		}

	}

	@Override
	public void updateRecord(Location data) throws SQLException {
		{
			try {
				PreparedStatement preparedStmt = connection.prepareStatement(UPDATE_Location_QUERY);
				//preparedStmt.setString(1, data.getPlmn_id());
				preparedStmt.setInt(2, data.getOru_id());
				//preparedStmt.setInt(3, data.getTac());
				preparedStmt.setString(4, data.getStatusinfo().getStatus());
				preparedStmt.setString(5, data.getOru_name());
				int res = preparedStmt.executeUpdate();
				if (res != 0) {
					// System.out.println("node ----:" + data.getName() + " successfully updated.!");
				}
			} catch (SQLException e) {
				connection.close();
				System.out.println("Connection Closed while updating node records");
			}
		}
	}

	@Override
	public void deleteRecords(List<String> params) throws SQLException {
		try (Statement statement = connection.createStatement()) {
			for (String param : params) {
				statement.executeUpdate(DELETE_LOCATION_QUERY + "'" + param + "'");
			}
		} catch (SQLException e) {
			connection.close();
		}
	}

	@Override
	public void updateOrInsertRecords(List<Location> listOfData) throws SQLException {
		if (listOfData == null || listOfData.isEmpty())
			return;

		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("core_id", Core5GDetails._5G_CORE_ID);
		List<Location> existingLocations = getRecordByParam(paramMap);

		if (existingLocations.isEmpty()) {
			insertRecords(listOfData);
		} else {

			List<String> existingLocationIds = existingLocations.stream().map(node -> node.getOru_id()).map(p->p.toString())
					.collect(Collectors.toList());
			List<String> currentLocationIds = listOfData.stream().map(node -> node.getOru_id()).map(p->p.toString()).collect(Collectors.toList());

			List<String> deleteLocations = existingLocationIds.stream().filter(i -> !currentLocationIds.contains(i))
					.collect(Collectors.toList());
			//deleteRecords(deleteLocations);
			List<Location> insertLocations = listOfData.stream().filter(i -> !existingLocationIds.contains(i.getOru_id()))
					.collect(Collectors.toList());
			insertRecords(insertLocations);

			for (Location curr_node : listOfData) {
				for (Location ext_node : existingLocations) {
					if (curr_node.getOru_id() == ext_node.getOru_id()) {
						String status = curr_node.getStatusinfo().getStatus();
						if (!status.equals(ext_node.getStatusinfo().getStatus()))
							updateRecord(curr_node);
					}
				}
			}
		}
	}

	@Override
	public void pollRecords(List<Location> listOfData) throws SQLException, InterruptedException {
		updateOrInsertRecords(listOfData);
		System.out.println("Location records are polling..");
	}

	public static void main(String[] args) throws SQLException, InterruptedException {
		new LocationDAO().pollRecords(null);
	}
}
